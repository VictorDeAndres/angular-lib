{"version":3,"sources":["ng://@ng-library/common-library/lib/wrapper-component-d3.service.ts","ng://@ng-library/common-library/lib/colors.service.ts"],"names":["WrapperComponentD3","_elementRef","this","_uid","generateUID","_height","nativeElement","clientHeight","_width","clientWidth","id","_svgContainer","d3.select","append","attr","Object","defineProperty","prototype","Date","now","Math","random","toString","replace","Colors","generateRandomPallete","length","Array","fill","map","color","i","floor"],"mappings":"yTAEA,IAAAA,EAAA,WASE,SAAAA,EACEC,GAIAC,KAAKC,KAAOD,KAAKE,cACjBF,KAAKG,QAAUJ,EAAYK,cAAcC,aACzCL,KAAKM,OAASP,EAAYK,cAAcG,YAGxCR,EAAYK,cAAcI,GAAKR,KAAKC,KAGpCD,KAAKS,cAAgBC,EAAAA,OAAU,IAAIV,KAAKC,MACrCU,OAAO,OACPC,KAAK,KAAM,OAAOZ,KAAKC,MACvBW,KAAK,SAAUZ,KAAKG,SACpBS,KAAK,QAASZ,KAAKM,QA+C1B,OAvCEO,OAAAC,eAAIhB,EAAAiB,UAAA,eAAY,KAAhB,WACE,OAAOf,KAAKS,+CAQdI,OAAAC,eAAIhB,EAAAiB,UAAA,MAAG,KAAP,WACE,OAAOf,KAAKC,sCAQdY,OAAAC,eAAIhB,EAAAiB,UAAA,SAAM,KAAV,WACE,OAAOf,KAAKG,yCAQdU,OAAAC,eAAIhB,EAAAiB,UAAA,QAAK,KAAT,WACE,OAAOf,KAAKM,wCAQNR,EAAAiB,UAAAb,YAAR,WACE,OAAQc,KAAKC,MAAQC,KAAKC,UAAUC,SAAS,IAAIC,QAAQ,IAAK,MAElEvB,EAzEA,GCAA,IAAAwB,EAAA,WAEE,SAAAA,KAoBF,OAXEA,EAAAP,UAAAQ,sBAAA,SAAsBC,GAGpB,OADgB,IAAIC,MAAMD,GAAQE,KAAK,IACxBC,IAAG,WAEhB,QADIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GALY,mBAKKV,KAAKY,MAAsB,GAAhBZ,KAAKC,WAEnC,OAAOS,KAGbN,EAtBA","sourcesContent":["import { ElementRef } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport class WrapperComponentD3 {\n\n  private _svgContainer;\n  private _uid: string;\n  private _height: number;\n  private _width: number;\n\n  constructor(\n    _elementRef: ElementRef\n  ) {\n\n    // Initialize private variables\n    this._uid = this.generateUID();\n    this._height = _elementRef.nativeElement.clientHeight;\n    this._width = _elementRef.nativeElement.clientWidth;\n\n    // Add Id to Element;\n    _elementRef.nativeElement.id = this._uid;\n\n    // Create svg container\n    this._svgContainer = d3.select(`#${this._uid}`)\n      .append('svg')\n      .attr('id', `svg-${this._uid}`)\n      .attr('height', this._height)\n      .attr('width', this._width);\n  }\n\n  /**\n   * svgContainer\n   * return svg container\n   * @returns HTMLElement\n   */\n  get svgContainer(): HTMLElement {\n    return this._svgContainer;\n  }\n\n  /**\n   * uid\n   * return uid of container\n   * @returns string\n   */\n  get uid(): string {\n    return this._uid;\n  }\n\n  /**\n   * height\n   * return height of container\n   * @returns number\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * width\n   * return width of container\n   * @returns number\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * generateUID\n   * Generate new UID. The uid is make with Date.now and plus random number and then replace it to string.\n   * @returns string\n   */\n  private generateUID(): string {\n    return (Date.now() + Math.random()).toString(36).replace('.', '-');\n  }\n}","import { ElementRef } from '@angular/core';\n\nexport class Colors {\n\n  constructor() { }\n\n  /**\n   * generateRandomPallete\n   *\n   * Generate random palette of colors\n   * @param length. Number of colors in generate pallete\n   * @returns Array\n   */\n  generateRandomPallete(length: number): Array<string> {\n    const letters = '0123456789ABCDEF';\n    const pallete = new Array(length).fill('');\n    return pallete.map( () => {\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    });\n  }\n}\n"]}